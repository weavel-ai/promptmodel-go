// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"

	core "github.com/weavel-ai/promptmodel-go/core"
)

type Choices = map[string]interface{}

type ChatMessageInstance struct {
	Role      string                   `json:"role"`
	Name      *string                  `json:"name,omitempty"`
	Content   *string                  `json:"content,omitempty"`
	ToolCalls []map[string]interface{} `json:"tool_calls,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ChatMessageInstance) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessageInstance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessageInstance(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessageInstance) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeployedChatModelVersionInstance struct {
	Uuid          string   `json:"uuid"`
	FromVersion   *int     `json:"from_version,omitempty"`
	ChatModelUuid string   `json:"chat_model_uuid"`
	Model         string   `json:"model"`
	IsPublished   bool     `json:"is_published"`
	IsAbTest      *bool    `json:"is_ab_test,omitempty"`
	Ratio         *float64 `json:"ratio,omitempty"`
	SystemPrompt  string   `json:"system_prompt"`

	_rawJSON json.RawMessage
}

func (d *DeployedChatModelVersionInstance) UnmarshalJSON(data []byte) error {
	type unmarshaler DeployedChatModelVersionInstance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeployedChatModelVersionInstance(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeployedChatModelVersionInstance) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeployedFunctionModelVersionInstance struct {
	Uuid              string   `json:"uuid"`
	FromVersion       *int     `json:"from_version,omitempty"`
	FunctionModelUuid string   `json:"function_model_uuid"`
	Model             string   `json:"model"`
	IsPublished       bool     `json:"is_published"`
	IsAbTest          *bool    `json:"is_ab_test,omitempty"`
	Ratio             *float64 `json:"ratio,omitempty"`
	ParsingType       *string  `json:"parsing_type,omitempty"`
	OutputKeys        []string `json:"output_keys,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeployedFunctionModelVersionInstance) UnmarshalJSON(data []byte) error {
	type unmarshaler DeployedFunctionModelVersionInstance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeployedFunctionModelVersionInstance(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeployedFunctionModelVersionInstance) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeployedPromptInstance struct {
	VersionUuid string `json:"version_uuid"`
	Role        string `json:"role"`
	Content     string `json:"content"`
	Step        int    `json:"step"`

	_rawJSON json.RawMessage
}

func (d *DeployedPromptInstance) UnmarshalJSON(data []byte) error {
	type unmarshaler DeployedPromptInstance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeployedPromptInstance(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeployedPromptInstance) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type HttpValidationError struct {
	Detail []*ValidationError `json:"detail,omitempty"`

	_rawJSON json.RawMessage
}

func (h *HttpValidationError) UnmarshalJSON(data []byte) error {
	type unmarshaler HttpValidationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HttpValidationError(value)
	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HttpValidationError) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type ModelResponseChoicesItem struct {
	typeName         string
	Choices          Choices
	StreamingChoices StreamingChoices
}

func NewModelResponseChoicesItemFromChoices(value Choices) *ModelResponseChoicesItem {
	return &ModelResponseChoicesItem{typeName: "choices", Choices: value}
}

func NewModelResponseChoicesItemFromStreamingChoices(value StreamingChoices) *ModelResponseChoicesItem {
	return &ModelResponseChoicesItem{typeName: "streamingChoices", StreamingChoices: value}
}

func (m *ModelResponseChoicesItem) UnmarshalJSON(data []byte) error {
	var valueChoices Choices
	if err := json.Unmarshal(data, &valueChoices); err == nil {
		m.typeName = "choices"
		m.Choices = valueChoices
		return nil
	}
	var valueStreamingChoices StreamingChoices
	if err := json.Unmarshal(data, &valueStreamingChoices); err == nil {
		m.typeName = "streamingChoices"
		m.StreamingChoices = valueStreamingChoices
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m ModelResponseChoicesItem) MarshalJSON() ([]byte, error) {
	switch m.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", m.typeName, m)
	case "choices":
		return json.Marshal(m.Choices)
	case "streamingChoices":
		return json.Marshal(m.StreamingChoices)
	}
}

type ModelResponseChoicesItemVisitor interface {
	VisitChoices(Choices) error
	VisitStreamingChoices(StreamingChoices) error
}

func (m *ModelResponseChoicesItem) Accept(visitor ModelResponseChoicesItemVisitor) error {
	switch m.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", m.typeName, m)
	case "choices":
		return visitor.VisitChoices(m.Choices)
	case "streamingChoices":
		return visitor.VisitStreamingChoices(m.StreamingChoices)
	}
}

type StreamingChoices = map[string]interface{}

type Usage = map[string]interface{}

type ValidationError struct {
	Loc  []*ValidationErrorLocItem `json:"loc,omitempty"`
	Msg  string                    `json:"msg"`
	Type string                    `json:"type"`

	_rawJSON json.RawMessage
}

func (v *ValidationError) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidationError(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidationError) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidationErrorLocItem struct {
	typeName string
	String   string
	Integer  int
}

func NewValidationErrorLocItemFromString(value string) *ValidationErrorLocItem {
	return &ValidationErrorLocItem{typeName: "string", String: value}
}

func NewValidationErrorLocItemFromInteger(value int) *ValidationErrorLocItem {
	return &ValidationErrorLocItem{typeName: "integer", Integer: value}
}

func (v *ValidationErrorLocItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typeName = "string"
		v.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		v.typeName = "integer"
		v.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v ValidationErrorLocItem) MarshalJSON() ([]byte, error) {
	switch v.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return json.Marshal(v.String)
	case "integer":
		return json.Marshal(v.Integer)
	}
}

type ValidationErrorLocItemVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
}

func (v *ValidationErrorLocItem) Accept(visitor ValidationErrorLocItemVisitor) error {
	switch v.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return visitor.VisitString(v.String)
	case "integer":
		return visitor.VisitInteger(v.Integer)
	}
}
