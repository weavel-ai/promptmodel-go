// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"

	core "github.com/weavel-ai/promptmodel-go/core"
)

type FetchChatModelVersionWithChatLogRequest struct {
	ChatModelName string  `json:"-"`
	SessionUuid   *string `json:"-"`
	Version       *string `json:"-"`
}

type FetchFunctionModelVersionRequest struct {
	FunctionModelName string  `json:"-"`
	Version           *string `json:"-"`
}

type MakeSessionRequest struct {
	SessionUuid string `json:"-"`
	VersionUuid string `json:"-"`
}

type SaveChatLogRequest struct {
	SessionUuid string                    `json:"-"`
	VersionUuid *string                   `json:"-"`
	Body        []*ChatMessageRequestBody `json:"-"`
}

func (s *SaveChatLogRequest) UnmarshalJSON(data []byte) error {
	var body []*ChatMessageRequestBody
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	s.Body = body
	return nil
}

func (s *SaveChatLogRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.Body)
}

type SaveChatMessageScoreRequest struct {
	ChatMessageUuid string                 `json:"-"`
	Body            map[string]interface{} `json:"-"`
}

func (s *SaveChatMessageScoreRequest) UnmarshalJSON(data []byte) error {
	var body map[string]interface{}
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	s.Body = body
	return nil
}

func (s *SaveChatMessageScoreRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.Body)
}

type SaveChatSessionScoreRequest struct {
	ChatSessionUuid string                 `json:"-"`
	Body            map[string]interface{} `json:"-"`
}

func (s *SaveChatSessionScoreRequest) UnmarshalJSON(data []byte) error {
	var body map[string]interface{}
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	s.Body = body
	return nil
}

func (s *SaveChatSessionScoreRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.Body)
}

type RunLogRequestBody struct {
	VersionUuid   string                 `json:"-"`
	Uuid          string                 `json:"uuid"`
	ApiResponse   *ModelResponse         `json:"api_response,omitempty"`
	Inputs        map[string]interface{} `json:"inputs,omitempty"`
	ParsedOutputs map[string]interface{} `json:"parsed_outputs,omitempty"`
	Metadata      map[string]interface{} `json:"metadata,omitempty"`
}

type SaveRunLogScoreRequest struct {
	RunLogUuid string                 `json:"-"`
	Body       map[string]interface{} `json:"-"`
}

func (s *SaveRunLogScoreRequest) UnmarshalJSON(data []byte) error {
	var body map[string]interface{}
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	s.Body = body
	return nil
}

func (s *SaveRunLogScoreRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.Body)
}

type ChatMessageRequestBody struct {
	Uuid        string                 `json:"uuid"`
	Message     map[string]interface{} `json:"message,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
	ApiResponse *ModelResponse         `json:"api_response,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ChatMessageRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessageRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessageRequestBody(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessageRequestBody) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type FetchChatModelVersionResponseInstance struct {
	ChatModelVersions []*DeployedChatModelVersionInstance `json:"chat_model_versions,omitempty"`
	ChatMessages      []*ChatMessageInstance           `json:"chat_messages,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FetchChatModelVersionResponseInstance) UnmarshalJSON(data []byte) error {
	type unmarshaler FetchChatModelVersionResponseInstance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FetchChatModelVersionResponseInstance(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FetchChatModelVersionResponseInstance) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FetchFunctionModelVersionResponseInstance struct {
	FunctionModelVersions []*DeployedFunctionModelVersionInstance `json:"function_model_versions,omitempty"`
	Prompts               []*DeployedPromptInstance               `json:"prompts,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FetchFunctionModelVersionResponseInstance) UnmarshalJSON(data []byte) error {
	type unmarshaler FetchFunctionModelVersionResponseInstance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FetchFunctionModelVersionResponseInstance(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FetchFunctionModelVersionResponseInstance) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type ModelResponse struct {
	Id                string                      `json:"id"`
	Choices           []*ModelResponseChoicesItem `json:"choices,omitempty"`
	Created           int                         `json:"created"`
	Model             *string                     `json:"model,omitempty"`
	Object            string                      `json:"object"`
	SystemFingerprint *string                     `json:"system_fingerprint,omitempty"`
	Usage             *Usage                      `json:"usage,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelResponse(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelResponse) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}
